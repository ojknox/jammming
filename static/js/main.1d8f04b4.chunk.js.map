{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","config.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["userAccessToken","SearchBar","props","state","term","search","bind","handleTermChange","handleKeyPress","this","onSearch","event","setState","target","value","key","className","placeholder","onChange","onKeyPress","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","playlistName","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","accessToken","console","log","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","currentPlaylist","find","saveTrack","push","newPlaylist","filter","savedTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d8f04b4.chunk.js","sourcesContent":["import { config } from \"../config.js\";\nlet userAccessToken;\nconst clientId = config.SPOTIFY_API_KEY;\nconst redirectUri = \"https://ojknox.github.io/jammming/\";\n\nconst Spotify = {\n  getAccessToken() {\n    if (userAccessToken) {\n      return userAccessToken;\n    }\n\n    // check for access tocken match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      userAccessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      //This clears the parameters, allowing us to grab a new access token when it expires\n      window.setTimeout(() => (userAccessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return userAccessToken;\n    } else {\n      //If access token is not in url then go authorisation page of spotify to login\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      //this step redirects a user\n      window.location.href = accessUrl;\n    }\n  },\n\n  search(term) {\n    //have access to token while doing search\n    const accessToken = Spotify.getAccessToken();\n    console.log(`Pressed search, access token is ${accessToken}`);\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        console.log(jsonResponse);\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map((track) => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n        }));\n      });\n  },\n\n  savePlaylist(playlistName, trackUris) {\n    if (!playlistName || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    let userId;\n\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        userId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n          method: \"POST\",\n          headers: headers,\n          body: JSON.stringify({\n            name: playlistName,\n          }),\n        })\n          .then((response) => response.json())\n          .then((jsonResponse) => {\n            const playlistId = jsonResponse.id;\n            return fetch(\n              `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\n              {\n                method: \"POST\",\n                headers: headers,\n                body: JSON.stringify({\n                  uris: trackUris,\n                }),\n              }\n            );\n          });\n      });\n  },\n};\n\nexport default Spotify;\n","import React from \"react\";\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {term: ''};\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n    }\n    \n    search() {\n        this.props.onSearch(this.state.term);\n    }\n\n    handleTermChange(event) {\n        this.setState({term: event.target.value});\n    }\n\n    handleKeyPress(event) {\n        if(event.key === 'Enter') {\n            this.search();\n        }\n    }\n    \n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} onKeyPress={this.handleKeyPress}/>\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n    //check step 27\n    renderAction() {\n        if(this.props.isRemoval){\n            return <button className='Track-action' onClick={this.removeTrack}>-</button>\n        } else {\n            return <button className='Track-action' onClick={this.addTrack}>+</button>\n        }\n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n    \n    render() {\n        return (\n            <div className=\"Track\"> \n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        )\n    }\n}\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n    render() {\n        return (\n            <div className=\"TrackList\">\n                {\n                    this.props.tracks.map(track => {\n                        return <Track track={track} key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval}/>\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default TrackList;","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\n            </div>\n        )\n    }\n};\n\nexport default SearchResults;\n\n","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n    \n    handleNameChange(event) {\n        this.props.onNameChange(event.target.value);\n    }\n    \n    render() {\n        return (\n            <div className=\"Playlist\">\n                <input value={this.props.playlistName} onChange={this.handleNameChange}/>\n                <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true}/>\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        )\n    }\n};\n\nexport default Playlist;","export const config = {\n  SPOTIFY_API_KEY: \"b5f5294b858246e297395f07b9373725\",\n};\n","import React from 'react';\nimport './App.css';\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Playlist from \"../Playlist/Playlist\";\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'My playlist',\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let currentPlaylist = this.state.playlistTracks;\n    if(currentPlaylist.find(saveTrack => saveTrack.id === track.id)) {\n      return;\n    }\n    currentPlaylist.push(track);\n    this.setState({playlistTracks: currentPlaylist});\n  }\n  \n  removeTrack(track) {\n    let newPlaylist = this.state.playlistTracks.filter(savedTrack => savedTrack.id !== track.id);\n    this.setState({playlistTracks: newPlaylist});\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({ \n        playlistName: 'New Playlist', \n        playlistTracks: [] });\n    })\n  }\n\n  search(term) {\n    console.log(`term used to search is ${term}`);\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults});\n    });\n    console.log(this.state.searchResults);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n            <Playlist playlistName={this.state.playlistName} \n                      playlistTracks={this.state.playlistTracks} \n                      onRemove={this.removeTrack} \n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}